Goroutine
---------
- Goroutines are lightweight threads managed by the Go runtime.
- When you start a goroutine (using the go keyword), it runs a function concurrently with the rest of your program.
- Theyâ€™re ideal for tasks that can run in parallel, like waiting for multiple databases to start.

Channel
---------
- Channels in Go provide a way for goroutines to communicate with each other and synchronize their execution.
- Think of channels as pipes that allow you to send values from one goroutine to another.
- Channels are typed, (thread-safe queue) meaning they can only carry a specific type of data (like int, string, or even an empty struct struct{}).

Send data to a channel
------------------------
- eg: ch <- 69
- The <- operator is called the channel operator.
- Data flows in the direction of the arrow.
- This operation will block until another goroutine is ready to receive the value.

Receive data from a channel
------------------------
- eg: v := <-ch
- This reads and removes a value from the channel and saves it into the variable v.
- This operation will block until there is a value in the channel to be read.

Blocking and deadlocks
------------------------
- A deadlock is when a group of goroutines are all blocking so none of them can continue.
- This is a common bug that you need to watch out for in concurrent programming.
