Goroutine
---------
- Goroutines are lightweight threads managed by the Go runtime.
- When you start a goroutine (using the go keyword), it runs a function concurrently with the rest of your program.
- Theyâ€™re ideal for tasks that can run in parallel, like waiting for multiple databases to start.

Channel
---------
- Channels in Go provide a way for goroutines to communicate with each other and synchronize their execution.
- Think of channels as pipes that allow you to send values from one goroutine to another.
- Channels are typed, (thread-safe queue) meaning they can only carry a specific type of data (like int, string, or even an empty struct struct{}).

Send data to a channel
------------------------
- eg: ch <- 69
- The <- operator is called the channel operator.
- Data flows in the direction of the arrow.
- This operation will block until another goroutine is ready to receive the value.

Receive data from a channel
------------------------
- eg: v := <-ch
- This reads and removes a value from the channel and saves it into the variable v.
- This operation will block until there is a value in the channel to be read.

Blocking and deadlocks
------------------------
- A deadlock is when a group of goroutines are all blocking so none of them can continue.
- This is a common bug that you need to watch out for in concurrent programming.

Channel
-------------
- Empty structs are often used as a unary value. Sometimes, we don't care what is passed through a channel. We care when and if it is passed.
- We can block and wait until something is sent on a channel using the following syntax
- eg: <-ch
- This will block until it pops a single item off the channel, then continue, discarding the item.


Buffer Channel
-----------------------
- create buffer channel using make() and provide buffer lenght as the second arg
- eg: ch := make(chan int, 100)
- A buffer allows the channel to hold a fixed number of values before sending blocks.
- This means sending on a buffered channel only blocks when the buffer is full, and receiving blocks only when the buffer is empty.


Closing Channel
---------------------
- Channels can be explicitly closed by a sender
- eg: ch := make(chan int) , close(ch)

- Similar to the ok value when accessing data in a map,
receivers can check the ok value when receiving from a channel to test if a channel was closed.
- eg: v, ok := <-ch
- ok is false if the channel is empty and closed.

- Sending on a closed channel will cause a panic.
- A panic on the main goroutine will cause the entire program to crash, and a panic in any other goroutine will cause that goroutine to crash.

- Closing isn't necessary.
- There's nothing wrong with leaving channels open, they'll still be garbage collected if they're unused.
- You should close channels to indicate explicitly to a receiver that nothing else is going to come across.


Channel Range
----------------------
- Similar to slices and maps, channels can be ranged over.
- eg:   for item := range ch {
             // item is the next value received from the channel
        }
- This example will receive values over the channel (blocking at each iteration if nothing new is there) and will exit only when the channel is closed.


Select Channel (listening to multiple channel at the same time)
------------------------------------------------------------------
- Sometimes we have a single goroutine listening to multiple channels and want to process data in the order it comes through each channel.
- A select statement is used to listen to multiple channels at the same time.
- It is similar to a switch statement but for channels.
- eg:   select {
            case i, ok := <- chInts:
                fmt.Println(i)
            case s, ok := <- chStrings:
                fmt.Println(s)
        }
- The first channel with a value ready to be received will fire and its body will execute.
- If multiple channels are ready at the same time one is chosen randomly.
- The ok variable in the example above refers to whether or not the channel has been closed by the sender yet.

Default in Select Channel
-------------------------------
- The default case in a select statement executes immediately if no other channel has a value ready.
- A default case stops the select statement from blocking.



Read Only Channel
----------------------
- A channel can be marked as read-only by casting it from a "chan" to a "<-chan" type.
- eg:   func main() {
            ch := make(chan int)
            readCh(ch)
        }

        func readCh(ch <-chan int) {
            // ch can only be read from
            // in this function
        }


Write Only Channel
----------------------
- The same goes for write-only channels, but the arrow's position moves.
- eg:   func writeCh(ch chan<- int) {
            // ch can only be written to
            // in this function
        }



standard library function (Time)
[
    - time.Tick() is a standard library function that returns a channel that sends a value on a given interval.
    - time.After() sends a value once after the duration has passed.
    - time.Sleep() blocks the current goroutine for the specified duration of time.
]
