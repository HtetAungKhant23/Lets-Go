Package
---------
A directory of Go code can have at most one package.
By convention, we name our package the same as the directory.
All .go files in a single directory must all belong to the same package.
Directory of Go code that's all compiled together.

Module
---------
A repository contains one or more modules.
A module is a collection of Go packages that are released together.

Go Build
---------
One of the beauties of Go is that you always go build for production,
 and because the output is a statically compiled binary,
 you can ship it to production or end users without them needing the Go toolchain installed.

Go Install
---------
Compiles and installs a package or packages on your local machine for your personal usage.
It installs the package's compiled binary in the GOBIN directory.


Clean Package
--------------
1. Hide internal logic
If you're familiar with the pillars of OOP, this is a practice in encapsulation.
Oftentimes an application will have complex logic that requires a lot of code. In almost every case the logic that the application cares about can be exposed via an API, and most of the dirty work can be kept within a package. For example, imagine we are building an application that needs to classify images. We could build a package:

package classifier
code example:
// ClassifyImage classifies images as "hotdog" or "not hotdog"
func ClassifyImage(image []byte) (imageType string) {
	if hasHotdogColors(image) && hasHotdogShape(image) {
		return "hotdog"
	} else {
		return "not hotdog"
	}
}

func hasHotdogShape(image []byte) bool {
	// internal logic that the application doesn't need to know about
	return true
}

func hasHotdogColors(image []byte) bool {
	// internal logic that the application doesn't need to know about
	return true
}


We create an API by only exposing the function(s) that the application-level needs to know about. All other logic is unexported to keep a clean separation of concerns. The application doesn’t need to know how to classify an image, just the result of the classification.

2. Don’t change APIs
The unexported functions within a package can and should change often for testing, refactoring, and bug fixing.

A well-designed library will have a stable API so that users don't get breaking changes each time they update the package version. In Go, this means not changing exported function’s signatures.

3. Don’t export functions from the main package
A main package isn't a library, there's no need to export functions from it.

4. Packages shouldn't know about dependents
Perhaps one of the most important and most broken rules is that a package shouldn’t know anything about its dependents. In other words, a package should never have specific knowledge about a particular application that uses it.