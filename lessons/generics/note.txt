Generic
----------

- generics allow us to use variables to refer to specific types.
- This is an amazing feature because it allows us to write abstract functions that drastically reduce code duplication.
- eg:   func splitAnySlice[T any](s []T) ([]T, []T) {
            mid := len(s)/2
            return s[:mid], s[mid:]
        }


Constraints
--------------
- Constraints are just interfaces that allow us to write generics that only operate within the constraints of a given interface type.
- In the example above, the any constraint is the same as the empty interface because it means the type in question can be anything.



Parametric Constraints
------------------------
- Your interface definitions, which can later be used as constraints, can accept type parameters as well.
- eg:       type product interface {
                Price() float64
                Name() string
            }

            type store[P product] interface {
                Sell(P)
            }
- The store interface represents a store that sells products.
- It takes a type parameter P that represents the type of products the store sells.



Interface Type Lists
-----------------------
- When generics were released, a new way of writing interfaces was also released at the same time!
- We can now simply list a bunch of types to get a new interface/constraint.

// Ordered is a type constraint that matches any ordered type.
// An ordered type is one that supports the <, <=, >, and >= operators.
type Ordered interface {
    ~int | ~int8 | ~int16 | ~int32 | ~int64 |
        ~uint | ~uint8 | ~uint16 | ~uint32 | ~uint64 | ~uintptr |
        ~float32 | ~float64 |
        ~string
}



Zero Value of a Type
-----------------------
- Creating a variable that's the zero value of a type is easy:
- eg:   var myZero T
